package main

import "fmt"

/**
这是一个函数用例的demo
*/
/**
func 函数名(参数列表) 返回值列表 {
     函数体
}
函数名 表示函数的名称，通常采用驼峰命名法。
参数列表 表示函数的参数列表，多个参数之间用逗号分隔，每个参数都包含参数名称和参数类型。
返回值列表 表示函数的返回值列表，多个返回值之间用逗号分隔，每个返回值都包含返回值类型。
函数体 表示函数的具体实现，用于封装一段可以重复使用的代码。
*/
//一个简单的函数
//func add(x,y int) int等价于func add(x int,y int) int
func add(x, y int) int {
	return x + y
}

// 函数的参数列表和返回值列表都是可选的，
// 如果函数不需要接受参数或者不需要返回值，可以省略它们。
// 例如，下面是一个不接受参数、不返回值的示例代码：
func sayHello() {
	fmt.Println("hello")
}

/**
函数的闭包
函数闭包是指一个函数内部定义的函数，
可以访问外部函数的变量和参数，并且可以在外部函数返回后继续访问这些变量和参数。
闭包可以用于封装函数内部的状态，实现更加灵活的编程逻辑
*/

func count() func() int {
	i := 1
	return func() int {
		i++
		return i
	}
}

/*
*
函数的多返回值：Go 语言中的函数可以返回多个值，这在某些情况下可以简化代码。
例如，strings.Index 函数返回两个值，分别表示子串在字符串中的位置和是否存在该子串。
可以使用空白标识符 _ 忽略不需要的返回值
*/
func divide(x, y, z int) (int, int, int) {
	return z, y, x
}

/*
*
函数的可变参数：Go 语言中的函数可以使用可变参数来接收不定数量的参数。
可变参数使用 ... 符号表示，可以接收任意数量的参数，并以切片的形式传递给函数。
例如，fmt.Println 函数就是一个可变参数函数，可以打印任意数量的参数。
...interface{}表示任何类型
*/
func Prints(a ...interface{}) {
	fmt.Println(a)
}

/*
*
函数的匿名函数：在 Go 语言中，可以使用匿名函数来定义没有函数名的函数。
匿名函数可以直接使用，也可以作为其他函数的参数或返回值。
使用匿名函数可以减少代码的复杂度，提高代码的可读性。
*/
func main() {
	//用例1
	fmt.Println("3+4=", add(3, 4))
	sayHello()

	//用例2
	c := count()
	fmt.Println(c()) //2
	fmt.Println(c()) //3
	fmt.Println(c()) //4
	//由于闭包可以访问外部函数的变量和参数，因此我们可以使用闭包来实现一些需要记住上下文状态的函数，
	//比如高阶函数、事件处理器等等。同时，闭包还可以用于实现一些比较底层的编程技巧，比如延迟执行、协程通信等等。
	//但是，由于闭包会引用外部函数的变量和参数，因此需要特别注意内存管理和并发访问等问题

	//用例3
	fmt.Println(divide(3, 4, 5))
	_, y, _ := divide(3, 4, 5)
	fmt.Println(y)

	//用例4
	Prints(1, 2, 3, 4, 5, 9, "sifgiwg")

	//用例5
	/**
	匿名函数没有函数名，直接在代码中定义并调用即可。
	在 main 函数中，将匿名函数定义在一对圆括号内，并在后面加上一对空括号调用函数。
	*/
	func(x int) {
		sum := 0
		i := 0
		for i < x {
			sum = sum + i
			i++
		}
		fmt.Println("匿名函数", sum)
	}(5) //括号内表示参数，立即调用

}
